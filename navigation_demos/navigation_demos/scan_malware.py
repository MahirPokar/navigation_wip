#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan

class LaserScanFilterNode(Node):
    def __init__(self):
        super().__init__('scan_malware')
        # Subscriber
        self.scan_subscriber = self.create_subscription(
            LaserScan,
            '/scan_e',            # Input topic
            self.laser_callback,
            10
        )
        # Publisher
        self.scan_publisher = self.create_publisher(
            LaserScan,
            '/scan',            # Output topic
            10
        )

    def laser_callback(self, msg: LaserScan):
        # Create a new LaserScan message to publish
        filtered_scan = LaserScan()

        # Copy message metadata
        filtered_scan.header = msg.header
        filtered_scan.angle_min = msg.angle_min
        filtered_scan.angle_max = msg.angle_max
        filtered_scan.angle_increment = msg.angle_increment
        filtered_scan.time_increment = msg.time_increment
        filtered_scan.scan_time = msg.scan_time
        filtered_scan.range_min = msg.range_min
        filtered_scan.range_max = msg.range_max

        # Process ranges: replace values < 0.3 with inf
        filtered_ranges = []
        for r in msg.ranges:
            if r < 0.25:
                filtered_ranges.append(float('-inf'))
            else:
                filtered_ranges.append(r)

        filtered_scan.ranges = filtered_ranges
        # Copy intensities (unchanged)
        filtered_scan.intensities = msg.intensities

        # Publish the filtered scan
        self.scan_publisher.publish(filtered_scan)

def main(args=None):
    rclpy.init(args=args)
    node = LaserScanFilterNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

